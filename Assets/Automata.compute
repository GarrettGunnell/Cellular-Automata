#include "Random.cginc"

#pragma kernel SeedElementaryAutomaton
#pragma kernel ElementaryAutomaton
#pragma kernel SeedBriansBrain
#pragma kernel BriansBrain
#pragma kernel SeedBelousov
#pragma kernel BelousovZhabotinsky
#pragma kernel SeedSeeds
#pragma kernel Seeds

uint _Generation;
int _RandSeed;
float _SeedChance;
uint _RandomSeed;
uint _Width, _Height;
int _V;
float _K1, _K2, _G;

RWTexture2D<float4> _Result;

[numthreads(8,1,1)]
void SeedElementaryAutomaton(uint3 id : SV_DispatchThreadID) {
    uint2 texCoords = uint2(id.x, _Height - 1);
    initRand(_RandSeed + id.x * id.x);
    uint result = 0;

    if (_RandomSeed)
        result = randValue() < _SeedChance ? 1 : 0;
    
    result = id.x == (_Width - 1) ? 1 : result;

    _Result[texCoords.xy] = result;
}

[numthreads(8,1,1)]
void ElementaryAutomaton(uint3 id : SV_DispatchThreadID) {
    uint2 texCoords = uint2(id.x, _Generation);
    uint previous = _Result[uint2(texCoords.x, texCoords.y + 1)].a;
    uint left = _Result[uint2(texCoords.x - 1, texCoords.y + 1)].a;
    uint right = _Result[uint2(texCoords.x + 1, texCoords.y + 1)].a;
    float4 result = 1.0f;

    float3 red = float3(0.972f, 0.647f, 0.803f);
    float3 blue = float3(0.666f, 0.647f, 0.972f);
    float3 green = float3(0.647f, 0.972f, 0.694f);

    if (left == 1 && previous == 1 && right == 0)
        result.rgb = red * green;
    else if (left == 1 && previous == 0 && right == 1)
        result.rgb = red * blue;
    else if (left == 0 && previous == 1 && right == 0)
        result.rgb = green * blue;
    else if (left == 0 && previous == 1 && right == 0)
        result.rgb = green;
    else if (left == 0 && previous == 0 && right == 1)
        result.rgb = red;
    
    if (left == previous && previous == right)
        result = float4(0.145f, 0.098f, 0.160f, 0.0f);
    else if (left == 1 && previous == 0 && right == 0)
        result = 0.0f;


    _Result[texCoords.xy] = result;
}

[numthreads(8,8,1)]
void SeedBriansBrain(uint3 id : SV_DispatchThreadID) {
    initRand(_RandSeed + id.x * id.y);
    initRand(_RandSeed * randValue() + id.x + id.y * randValue());
    
    float3 deadColor = float3(0.922f, 0.91f, 0.875f);
    float3 aliveColor = float3(0.247f, 0.212f, 0.149f);

    _Result[id.xy] = randValue() < _SeedChance ? float4(aliveColor, 1.0f) : float4(deadColor.rgb, 0.0f);
}

[numthreads(8,8,1)]
void BriansBrain(uint3 id : SV_DispatchThreadID) {
    int x, y;
    int sum = 0;

    for (x = -1; x <= 1; ++x) {
        for (y = -1; y <= 1; ++y) {
            if (x == 0 && y == 0) continue;

            if (_Result[id.xy + int2(x, y)].a == 1.0f)
                sum += 1;
        }
    }

    float4 self = _Result[id.xy];

    float3 deadColor = float3(0.922f, 0.91f, 0.875f);
    float3 dyingColor = float3(0.149f, 0.184f, 0.247f);
    float3 aliveColor = float3(0.247f, 0.212f, 0.149f);
    float4 result = float4(deadColor.rgb, 0.0f);

    if (self.a == 1.0f)
        result = float4(dyingColor.rgb, 0.5f);
    else if (self.a == 0.5f)
        result = float4(deadColor.rgb, 0.0f);
    else if (sum == 2)
        result = float4(aliveColor.rgb, 1.0f);

    _Result[id.xy] = result;
}

[numthreads(8,8,1)]
void SeedBelousov(uint3 id : SV_DispatchThreadID) {
    initRand(_RandSeed + id.x * id.y);
    initRand(_RandSeed * randValue() + id.x * randValue() + id.y * randValue());

    _Result[id.xy] = randValue() < _SeedChance ? _V : float4(0.176f, 0.176f, 0.176f, 0.0f);
}

[numthreads(8,8,1)]
void BelousovZhabotinsky(uint3 id : SV_DispatchThreadID) {
    int x, y;
    float sum = 0.0f;
    float ill = 0.0f;
    float infected = 0.0f;

    for (x = -1; x <= 1; ++x) {
        for (y = -1; y <= 1; ++y) {
            if (x == 0 && y == 0) continue;
            float neighbor = _Result[id.xy + int2(x, y)].a;

            if (neighbor >= _V)
                ill += 1;
            else if (neighbor != 0.0f)
                infected += 1;

            sum += neighbor;
        }
    }

    float3 black = 0.176f;
    float3 lblue = float3(0.545f, 0.635f, 0.69f);
    float3 mblue = float3(0.298f, 0.435f, 0.561f);
    float3 dblue = float3(0.192f, 0.223f, 0.298f);
    float3 yellow1 = float3(0.953f, 0.863f, 0.549f);
    float3 yellow2 = float3(0.976f, 0.698f, 0.1334f);

    float result = 0.0f;
    float4 self = _Result[id.xy];
    sum += self.a;

    if (self.a >= _V) {
        result = 0.0f;
    } else if (self.a > 0.0f) {
        result = min((trunc(sum / (infected + ill + 1)) + _G), _V);
    } else {
        result = (trunc(infected / _K1) + trunc(ill / _K2));
    }

    float t = result / _V;
    float3 color;
    if (t >= 0.98f)
        color = lerp(yellow2, yellow1, t);
    else
        color = lerp(lblue, dblue, t);

    color = pow(abs(color), 1.2);

    _Result[id.xy] = float4(color, result);
}


[numthreads(8,8,1)]
void SeedSeeds(uint3 id : SV_DispatchThreadID) {
    initRand(_RandSeed + id.x * id.y);
    initRand(_RandSeed * randValue() + id.x * randValue() + id.y * randValue());

    _Result[id.xy] = randValue() < _SeedChance ? 1.0f : 0.0f;
}

[numthreads(8,8,1)]
void Seeds(uint3 id : SV_DispatchThreadID) {
    int x, y;
    int sum = 0;

    for (x = -1; x <= 1; ++x) {
        for (y = -1; y <= 1; ++y) {
            if (x == 0 && y == 0) continue;

            if (_Result[id.xy + int2(x, y)].a == 1.0f)
                sum += 1;
        }
    }

    float4 self = _Result[id.xy];

    _Result[id.xy] = (self.a == 0.0f && sum == 2) ? 1.0f : 0.0f;
}